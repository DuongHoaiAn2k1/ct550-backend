name: Laravel CI/CD with Docker

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Lấy mã nguồn
      - name: Checkout code
        uses: actions/checkout@v4
      # Cài đặt Docker (nếu chưa có)
      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io

      # Cài đặt Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
      

      # Thiết lập Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Create .env file
        run: |
          echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "PUSHER_APP_KEY=${{ secrets.PUSHER_APP_KEY }}" >> .env
          echo "PUSHER_APP_SECRET=${{ secrets.PUSHER_APP_SECRET }}" >> .env
          echo "PUSHER_APP_ID=${{ secrets.PUSHER_APP_ID }}" >> .env
      
      # Build container cho PHP
      - name: Build PHP container
        run: |
          docker-compose -f docker-compose.prod.yml build

      # Start Docker containers
      - name: Start Docker containers
        run: |
          docker-compose -f docker-compose.prod.yml up -d

      # Chạy migrate và seed database
      # - name: Run database migrations
      #   run: |
      #     docker-compose exec app php artisan migrate --force

      # Chạy test Laravel
      # - name: Run Tests
      #   run: |
      #     docker-compose exec app php artisan test

      # Đóng Docker containers sau khi test xong
      - name: Stop Docker containers
        run: |
          docker-compose down
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Thiết lập SSH Agent và add SSH private key
      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add known hosts
        run: ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Check SSH connection
        run: ssh -T ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}

      # Deploy tới server qua SSH
      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            set -e
            
            # Kiểm tra và tạo thư mục dự án nếu chưa tồn tại
            mkdir -p /var/www/ct550
            cd /var/www/ct550
      
            # Khởi tạo Git repository nếu chưa tồn tại
            if [ ! -d .git ]; then
              git init
              git remote add origin git@github.com:DuongHoaiAn2k1/ct550-backend.git
            else
              # Nếu repository đã tồn tại, cập nhật URL remote nếu cần
              git remote set-url origin git@github.com:DuongHoaiAn2k1/ct550-backend.git
            fi
      
            # Cấu hình Git để sử dụng SSH key cụ thể
            git config core.sshCommand "ssh -i ~/.ssh/ct550 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
      
            # Pull code mới nhất
            git fetch --all
            git reset --hard origin/main
      
            # Chạy Docker Compose
            docker-compose down
            docker-compose -f docker-compose.prod.yml up -d
             
            echo "Deployment completed successfully!"
          EOF





